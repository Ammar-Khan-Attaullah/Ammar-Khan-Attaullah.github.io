{"version":3,"sources":["logo.svg","components/Addform.js","components/Task.js","components/Tasks.js","components/pages/Home.js","components/pages/About.js","components/pages/Contact.js","components/pages/NoMatch.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Addform","props","addRecord","bind","e","preventDefault","fetch","method","headers","body","JSON","stringify","Math","floor","random","target","task","value","then","res","json","result","addRec","catch","err","console","log","onSubmit","this","className","type","name","id","placeholder","Component","Task","delRecord","editRecord","updateRecord","state","isEdit","getAttribute","tasks","onDel","setState","title","isCompleted","onUpdate","defaultValue","key","onClick","datakey","Tasks","getRecord","map","src","logo","alt","Home","About","Contact","NoMatch","Navbar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.409f8d57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {Component} from 'react';\r\n\r\n\r\nclass Addform extends Component{\r\n    constructor(props){\r\n        super();\r\n        this.addRecord = this.addRecord.bind(this);\r\n    }\r\n    addRecord(e){\r\n        e.preventDefault();\r\n        fetch('http://localhost:4000/tasks',{\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'Application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": Math.floor((Math.random() + 1) * 0x100000),\r\n                \"title\": e.target.task.value,\r\n                \"isCompleted\": \"false\"\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => this.props.addRec(result))\r\n        .catch(err => console.log(err));\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.addRecord}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" name=\"task\" id=\"task\" placeholder=\"Add new Task here\" className=\"form-control\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" value=\"Add Task\" className=\"btn btn-primary btn-block\"/>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\nexport default Addform;","import React, {Component, Fragment} from 'react';\r\nclass Task extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.delRecord = this.delRecord.bind(this);\r\n        this.editRecord = this.editRecord.bind(this);\r\n        this.updateRecord = this.updateRecord.bind(this);\r\n        this.state = {\r\n            isEdit: false\r\n\r\n        }\r\n\r\n    }\r\n    delRecord(e){\r\n        const id = e.target.getAttribute('datakey');\r\n        fetch('http://localhost:4000/tasks/'+id,{\r\n          method: \"DELETE\",\r\n          headers:{\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }).then(() =>{\r\n         fetch('http://localhost:4000/tasks')\r\n         .then(res => res.json())\r\n        .then(tasks => this.props.onDel(tasks))\r\n         //  .then(tasks => this.setState({tasks}))\r\n         .catch(err => console.log(err));\r\n     \r\n        }).catch(err => console.log(err));\r\n         // console.log(id);\r\n    }\r\n    editRecord(){\r\n        this.setState({isEdit: true});\r\n    }\r\n    updateRecord(e){\r\n        e.preventDefault();\r\n        console.log(e.target.task.value);\r\n        const id= e.target.id.value; \r\n        fetch('http://localhost:4000/tasks/'+id,{\r\n            method: \"PUT\",\r\n            headers:{\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body:JSON.stringify({\r\n                // id: id,\r\n                title: e.target.task.value,\r\n                isCompleted: \"false\",\r\n            })\r\n          }).then(res => res.json())\r\n          .then(task => {\r\n              this.props.onUpdate(task)\r\n              this.setState({isEdit: false})\r\n            })\r\n          .catch(err => console.log(err))\r\n            // console.log(e.target);\r\n    }\r\n    render(){\r\n        // console.log(this.props);\r\n        const {id, title, isCompleted} = this.props;\r\n        const task = (this.state.isEdit === true)\r\n        ?\r\n        <form onSubmit={this.updateRecord}>\r\n             <input type=\"hidden\" name=\"id\" id=\"id\" defaultValue={id}/>\r\n                <div className=\"form-group\">\r\n                    <label >Title<span className=\"text text-danger\">*</span></label>\r\n                    <input \r\n                    type=\"text\" \r\n                    name=\"task\" \r\n                    id=\"task\"\r\n                     defaultValue={title} className=\"form-control\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" value=\"Update Task\" className=\"btn btn-primary btn-block\"/>\r\n                </div>\r\n            </form>\r\n        :\r\n        <li className=\"list-group-item\" key={id}>{title}-{isCompleted} - <button className=\"btn btn-primary\" onClick={this.editRecord} datakey={id}>Edit</button> - <button className=\"btn btn-danger\" onClick={this.delRecord} datakey={id} >Delete</button></li>\r\n        return(\r\n            <Fragment>\r\n            {task}\r\n        </Fragment>\r\n        );\r\n    }\r\n}\r\nexport default Task;\r\n\r\n// <li className=\"list-group-item\" key={task.id}>{task.title}-{task.isCompleted} - <button className=\"btn btn-primary\" >Edit</button> - <button className=\"btn btn-danger\" onClick={this.delRecord} datakey={task.id} >Delete</button></li>\r\n\r\n// delRecord(e){\r\n// const id = e.target.getAttribute('datakey');\r\n// fetch('http://localhost:4000/tasks/'+id,{\r\n//   method: \"DELETE\",\r\n//   headers:{\r\n//     'Content-Type': 'application/json'\r\n//   }\r\n// }).then(() =>{\r\n//  fetch('http://localhost:4000/tasks')\r\n//  .then(res => res.json())\r\n//  .then(tasks => this.setState({tasks}))\r\n//  .catch(err => console.log(err));\r\n\r\n// }).catch(err => console.log(err));\r\n//  // console.log(id);","import React, {Component} from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport Addform from './Addform';\r\nimport Task from './Task';\r\n\r\nclass Tasks extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state ={\r\n      tasks: []\r\n    }\r\n    this.addRecord = this.addRecord.bind(this);\r\n    this.delRecord = this.delRecord.bind(this);\r\n    this.getRecord = this.getRecord.bind(this);\r\n  }\r\n  componentDidMount(){\r\n    // this.getRecord();\r\n    fetch('http://localhost:4000/tasks')\r\n    .then(res => res.json())\r\n    .then(tasks => this.setState({tasks}))\r\n    // .then(tasks => console.log(this.state.tasks))\r\n    // .then(tasks => console.log(this.state.tasks))\r\n    .catch(err => console.log(err));\r\n    \r\n\r\n  }\r\n  getRecord(e){\r\n    const tasks = this.state.tasks.map(task =>{\r\n      if(e.id === task.id){\r\n       return e\r\n    }\r\n    return task;\r\n      })\r\n      this.setState({tasks});\r\n   \r\n  }\r\n  addRecord(e){\r\n    const tasks = [...this.state.tasks, e];\r\n    this.setState({tasks})\r\n    // console.log(e);\r\n  }\r\n  delRecord(e){\r\n    this.setState({tasks: e})\r\n   \r\n  }\r\n  render(){\r\n  const tasks = this.state.tasks.map(task => <Task key={task.id}{...task} onDel={this.delRecord} onUpdate={this.getRecord}/>)\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1 className=\"App-header\">Welcome to React</h1>\r\n      </header>\r\n      <div className=\"App-intro\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6 offset-md-3\">\r\n              <Addform addRec={this.addRecord}/>\r\n              <ul className=\"list-group\">\r\n                <li className=\"list-group-item active\">Todo Tasks List</li>\r\n                {tasks}\r\n               \r\n              </ul>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Tasks;\r\n","import React, {Component} from 'react';\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    render(){\r\n        \r\n            return(\r\n            <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <h1 className=\"text-center\">Welcome to Home Page</h1> \r\n            </div>\r\n        </div>\r\n        );\r\n           \r\n    }\r\n}\r\nexport default Home;","import React, {Component} from 'react';\r\n\r\nclass About extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <h1 className=\"text-center\">Welcome to About Page</h1> \r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default About;","import React, {Component} from 'react';\r\n\r\nclass Contact extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    render(){\r\n        return( <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n            <h1 className=\"text-center\">Welcome to Contact Page</h1> \r\n        </div>\r\n    </div>);\r\n    }\r\n}\r\nexport default Contact;","import React, {Component} from 'react';\r\n\r\nclass NoMatch extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    render(){\r\n        return( <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n            <h1 className=\"text-center\">Error<strong>404</strong>Not Found</h1> \r\n        </div>\r\n    </div>);\r\n    }\r\n}\r\nexport default NoMatch;","import React, { Component, Fragment } from 'react';\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport Tasks from './Tasks';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport Contact from './pages/Contact';\r\nimport NoMatch from './pages/NoMatch';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Fragment>\r\n            <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                <Link className=\"navbar-brand\" to=\"#\">ReactApp</Link>\r\n                <button className=\"navbar-toggler hidden-lg-up\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/\">Home <span className=\"sr-only\">(current)</span></Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\" id=\"dropdownId\">About</Link>\r\n                        </li>\r\n                        <li className=\"nav-item \">\r\n                            <Link className=\"nav-link\" to=\"/tasks\" id=\"dropdownId\" >\r\n                                Tasks\r\n        </Link>\r\n\r\n                        </li>\r\n                        <li className=\"nav-item \">\r\n                            <Link className=\"nav-link\" to=\"/contact\" id=\"dropdownId\" >\r\n                                Contact\r\n        </Link>\r\n\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </nav>\r\n            <Switch>\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route exact path=\"/about\" component={About}/>\r\n            <Route exact path=\"/contact\" component={Contact}/>\r\n            <Route exact path=\"/tasks\" component={Tasks}/>\r\n            <Route  path=\"*\" component={NoMatch}/>\r\n            </Switch>\r\n            </Fragment>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\nexport default Navbar;","import React, {Component} from 'react';\n// import Tasks from './components/Tasks';\nimport Navbar from './components/Navbar';\n\nclass App extends Component {\n  \n  render(){\n  \n  return (\n  \n      <Navbar/>\n      \n    \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}